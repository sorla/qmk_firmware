// COMB|SUBS(name,  result,  keys)
// Right hand
COMB(UY_RBRC, KC_RBRC, KC_U, KC_Y)
COMB(LU_DQUO, UK_DQUO, KC_L, KC_U)
COMB(NE_MINS, KC_MINS, KC_N, KC_E)
COMB(EI_RPRN, KC_RPRN, KC_E, KC_I)
COMB(NI_SCLN, KC_SCLN, KC_I, KC_N)
COMB(HC_HASH, UK_HASH, KC_H, KC_COMM)

// Left hand
COMB(WF_LBRC, KC_LBRC, KC_W, KC_F)
COMB(FP_GRV,  KC_GRV,  KC_F, KC_P)
COMB(RT_BSLS, UK_BSLS, KC_R, KC_T)
COMB(RS_LPRN, KC_LPRN, KC_R, KC_S)
COMB(ST_EQL,  KC_EQL,  KC_S, KC_T)
COMB(ZX_BPIP, ALGR(KC_GRV), KC_Z, KC_X)
COMB(CD_HASH, UK_HASH, KC_C, KC_D)


// String substitution
SUBS(TM_temperature, "temperature", KC_T, KC_M)
SUBS(EL_element, "element", KC_E, KC_L)
SUBS(RY_resistivity, "resistivity", KC_R, KC_Y)
SUBS(RN_resistance, "resistance", KC_R, KC_N)
SUBS(MD_molybdenum, "molybdenum", KC_M, KC_D)
SUBS(TD_tungsten, "tungsten", KC_T, KC_D)
SUBS(CE_carbide, "carbide", KC_C, KC_E)
SUBS(SC_SiC, "silicon carbide", KC_S, KC_C)
SUBS(SL_silicon, "silicon", KC_S, KC_L)
SUBS(RX_experiment, "experiment", KC_R, KC_X)
SUBS(NX_extrusion, "extrusion", KC_N, KC_X)
SUBS(DX_extrude, "extrude", KC_D, KC_X)

// Common words put on chords on the base layer
SUBS(SPCA_are, "are ", SPC_NAV, KC_A)
SUBS(SPCR_was, "was ", SPC_NAV, KC_R)
SUBS(SPCS_of, "of ", SPC_NAV, KC_S)
SUBS(SPCT_the, "the ", SPC_NAV, KC_T)
SUBS(SPCQ_with, "with ", SPC_NAV, KC_W)
SUBS(SPCF_for, "for ", SPC_NAV, KC_F)
SUBS(SPCP_to, "to ", SPC_NAV, KC_P)
SUBS(SPCC_this, "this", SPC_NAV, KC_C)
SUBS(SPCD_that, "that ", SPC_NAV, KC_D)

SUBS(BSPN_and, "and ", BSP_NUM, KC_N)
SUBS(SPCE_in, "in ", BSP_NUM, KC_E)
SUBS(BSPI_by, "by ", BSP_NUM, KC_I)
SUBS(BSPO_be, "be", BSP_NUM, KC_O)
SUBS(BSPL_from, "from ", BSP_NUM, KC_L)
SUBS(BSPU_but, "but ", BSP_NUM, KC_U)
SUBS(BSPY_you, "you ", BSP_NUM, KC_Y)
SUBS(BSPH_have, "have ", BSP_NUM, KC_H)
SUBS(BSPCOMM_has, "has ", BSP_NUM, KC_COMM)

SUBS(IS_is , "is ", KC_I, KC_S)
SUBS(ON_on , "on ", KC_N, KC_O)
SUBS(AT_at , "at ", KC_T, KC_A)
SUBS(IT_it , "it ", KC_T, KC_I)
SUBS(AS_as , "as ", KC_A, KC_S) // 0.6% or so
SUBS(NT_not, "not", KC_N, KC_T)

// Punctuation with one shot shift...
COMB(BSPSPC_CAP , STP_CAP, BSP_NUM, SPC_NAV)
COMB(BSPENT_CAP , ENT_CAP, BSP_NUM, ENT_MOS)
COMB(BSPQUES_CAP , QUES_CAP, BSP_NUM, KC_SLSH)
COMB(BSPEXC_CAP , EXCL_CAP, BSP_NUM, KC_DOT, KC_SLSH)

// For FrogPad layer
COMB(sy_combo,       KC_Y,         KC_S,   SP_EX)
COMB(tp_combo,       KC_P,         KC_T,   SP_EX)
COMB(hl_combo,       KC_L,         KC_H,   SP_EX)
COMB(ed_combo,       KC_DOT,       KC_E,   SP_EX)
COMB(oq_combo,       KC_Q,         KC_O,   SP_EX)
COMB(fj_combo,       KC_J,         KC_F,   SP_EX)
COMB(dk_combo,       KC_K,         KC_D,   SP_EX)
COMB(nm_combo,       KC_M,         KC_N,   SP_EX)
COMB(iq_combo,       KC_QUOT,      KC_I,   SP_EX)
COMB(gm_combo,       KC_MINS,      KC_G,   SP_EX)
COMB(cx_combo,       KC_X,         KC_C,   SP_EX)
COMB(wb_combo,       KC_B,         KC_W,   SP_EX)
COMB(rv_combo,       KC_V,         KC_R,   SP_EX)
COMB(ac_combo,       KC_COMM,      KC_A,   SP_EX)
COMB(uz_combo,       KC_Z,         KC_U,   SP_EX)
COMB(ten_combo,      KC_ENT,       KC_ESC, SP_EX)


// Number layer
COMB(O2_MINS, KC_MINS, KC_1, KC_2)
