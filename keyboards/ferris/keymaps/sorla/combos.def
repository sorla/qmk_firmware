// Layer controls
COMB(NEI_MATHS, GO_MATHS, KC_N, KC_E, KC_I)
COMB(RST_NAV, TG_NAV, KC_R, KC_S, KC_T)
COMB(CD_FUN, MO_FUN, KC_C, KC_D)
COMB(XC_MOUS, TG_MOUS, KC_X, KC_C)
COMB(a137_HOME, GO_HOME, KC_1, KC_3, KC_7)
COMB(a206_HOME, TG_NAV, KC_2, KC_0, KC_6)

// Home row left hand backspace word and delete
COMB(BSPS_CBSP, C(KC_BSPC), BSP_SFT, KC_S)
COMB(BSPR_DEL, KC_DEL, BSP_SFT, KC_R)
// TAB and CAPS on right hand
COMB(SPCE_TAB, KC_TAB, SPC_CTL, KC_E)
COMB(SPCI_CAPS, KC_CAPS, KC_J, KC_L)

// Punctuation
// Right hand
COMB(UY_RBRC, KC_RBRC, KC_U, KC_Y)
COMB(LU_TAB, KC_TAB, KC_L, KC_U)
COMB(NM_MINS, KC_MINS, KC_N, KC_M)
COMB(LN_ASTR, KC_ASTR, KC_L, KC_N)
COMB(UE_EXLM, KC_EXLM, KC_U, KC_E)
COMB(YI_AMPR, KC_AMPR, KC_Y, KC_I)
COMB(NH_PERC, KC_PERC, KC_N, KC_H)
COMB(ECOMM_RPRN, KC_RPRN, KC_E, KC_COMM)
COMB(IDOT_COLN, KC_COLN, KC_I, KC_DOT)
COMB(COMMDOT_SCLN, KC_SCLN, KC_COMM, KC_DOT)
COMB(KH_HASH, UK_HASH, KC_H, KC_K)

// Left hand
COMB(WF_LBRC, KC_LBRC, KC_W, KC_F)
COMB(FP_DEL,  KC_DEL,  KC_F, KC_P)
COMB(WR_CIRC, KC_CIRC, KC_W, KC_R)
COMB(FS_DQUO, UK_DQUO, KC_F, KC_S)
COMB(PT_EQL, KC_EQL, KC_P, KC_T)
COMB(TG_BSLS, UK_BSLS, KC_G, KC_T)
COMB(SC_LPRN, KC_LPRN, KC_S, KC_C)
COMB(TD_DLR, KC_DLR, KC_T, KC_D)
COMB(RX_GRV, KC_GRV, KC_R, KC_X)
COMB(ZX_BPIP, ALGR(KC_GRV), KC_Z, KC_X)

// Num layer
COMB(O2_MINS, KC_MINS, KC_1, KC_2)
COMB(O3_COLN, KC_COLN, KC_1, KC_3)

// Punctuation with one shot shift...
COMB(BSPSPC_CAP , STP_CAP, BSP_SFT, SPC_CTL)

// Common words put on chords on the base layer
// Space + Left hand
SUBS(SPCA_are, "are ", SPC_CTL, KC_A)
SUBS(SPCR_was, "was ", SPC_CTL, KC_R)
SUBS(SPCS_of, "of ", SPC_CTL, KC_S)
SUBS(SPCT_the, "the ", SPC_CTL, KC_T)
SUBS(SPCQ_will, "will ", SPC_CTL, KC_Q)
SUBS(SPCW_with, "with ", SPC_CTL, KC_W)
SUBS(SPCF_for, "for ", SPC_CTL, KC_F)
SUBS(SPCP_to, "to ", SPC_CTL, KC_P)
SUBS(SPCX_these, "these ", SPC_CTL, KC_X)
SUBS(SPCZ_those, "those ", SPC_CTL, KC_Z)
SUBS(SPCC_this, "this ", SPC_CTL, KC_C)
SUBS(SPCD_that, "that ", SPC_CTL, KC_D)
SUBS(SPCT_because, "because ", SPC_CTL, KC_B)
SUBS(SPCG_were, "were ", SPC_CTL, KC_G)
SUBS(SPCV_differen, "differen", SPC_CTL, KC_V)
SUBS(SPCTP_they, "they ", SPC_CTL, KC_T, KC_P)
SUBS(SPCTD_than, "than ", SPC_CTL, KC_T, KC_D)
SUBS(SPCTG_temp, "temperature ", SPC_CTL, KC_T, KC_G)
SUBS(SPCWR_between, "between ", SPC_CTL, KC_W, KC_R)
SUBS(SPCRX_extru, "extru", SPC_CTL, KC_X, KC_R)
SUBS(SPCFS_well, "well ", SPC_CTL, KC_F, KC_S)
SUBS(SPCCS_which, "which ", SPC_CTL, KC_C, KC_S)

// Space + Right hand
SUBS(SPCN_ing, "ing ", SPC_CTL, KC_N)
SUBS(SPCM_ment, "ment ", SPC_CTL, KC_M)
SUBS(SPCI_tion, "tion ", SPC_CTL, KC_I)
SUBS(SPCO_nt, "n't ", SPC_CTL, KC_O)

// Bsp + Right Hand
SUBS(BSPN_and, "and ", BSP_SFT, KC_N)
SUBS(BSPE_in, "in ", BSP_SFT, KC_E)
SUBS(BSPI_by, "by ", BSP_SFT, KC_I)
SUBS(BSPO_be, "be ", BSP_SFT, KC_O)
SUBS(BSPL_from, "from ", BSP_SFT, KC_L)
SUBS(BSPU_but, "but ", BSP_SFT, KC_U)
SUBS(BSPY_you, "you ", BSP_SFT, KC_Y)
SUBS(BSPQUOT_ould, "ould ", BSP_SFT, KC_QUOT)
SUBS(BSPH_have, "have ", BSP_SFT, KC_H)
SUBS(BSPCOMM_has, "has ", BSP_SFT, KC_COMM)
SUBS(BSPCOMM_had, "had ", BSP_SFT, KC_DOT)
SUBS(BSPM_here, "here ", BSP_SFT, KC_M)
SUBS(BSPK_our, "our ", BSP_SFT, KC_K)
SUBS(BSPJ_please, "please ", BSP_SFT, KC_J)
SUBS(BSPNH_not, "not ", BSP_SFT, KC_N, KC_H)
SUBS(BSPJL_project, "project ", BSP_SFT, KC_J, KC_L)
SUBS(BSPNM_example, "example ", BSP_SFT, KC_N, KC_M)
SUBS(BSPIO_been, "been ", BSP_SFT, KC_I, KC_O)
SUBS(BSPNL_just, "just ", BSP_SFT, KC_N, KC_L)
SUBS(BSPEY_able, "able ", BSP_SFT, KC_E, KC_U)

// Bsp & Left hand (Teams and things)
COMB(BSP_SFTT_M, RCS(KC_M), BSP_SFT, KC_T) //mute
COMB(BSP_SFTG_K, RCS(KC_K), BSP_SFT, KC_G) //hand
COMB(BSP_SFTD_H, RCS(KC_H), BSP_SFT, KC_D) //hangup


/* Turning these off, but will redefine on new non-homerow things that are often triggered
SUBS(IS_is , "is ", KC_I, KC_S)
SUBS(ON_on , "on ", KC_N, KC_O)
SUBS(AT_at , "at ", KC_T, KC_A)
SUBS(IT_it , "it ", KC_T, KC_I)
SUBS(AS_as , "as ", KC_A, KC_S) // 0.6% or so
*/
// Once these are all ok, adding some work related words and programming symbols (return, each, import, class and any finicky punctuation) will be nice
